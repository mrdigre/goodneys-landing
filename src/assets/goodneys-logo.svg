<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   version="1.1"
   id="svg1"
   width="269.26279"
   height="217.36577"
   viewBox="0 0 448.77054 362.27568"
   sodipodi:docname="goodneys-logo.svg"
   xml:space="preserve"
   inkscape:export-filename="../../../astro-goodneys/src/assets/goodneys-logo.png"
   inkscape:export-xdpi="90"
   inkscape:export-ydpi="90"
   inkscape:version="1.3 (0e150ed, 2023-07-21)"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><defs
     id="defs1"><inkscape:path-effect
       effect="bspline"
       id="path-effect20"
       is_visible="true"
       lpeversion="1.3"
       weight="33.333333"
       steps="2"
       helper_size="0"
       apply_no_weight="true"
       apply_with_weight="true"
       only_selected="false"
       uniform="false" /><inkscape:path-effect
       effect="bspline"
       id="path-effect18"
       is_visible="true"
       lpeversion="1.3"
       weight="33.333333"
       steps="2"
       helper_size="0"
       apply_no_weight="true"
       apply_with_weight="true"
       only_selected="false"
       uniform="false" /><inkscape:path-effect
       effect="bspline"
       id="path-effect17"
       is_visible="true"
       lpeversion="1.3"
       weight="33.333333"
       steps="2"
       helper_size="0"
       apply_no_weight="true"
       apply_with_weight="true"
       only_selected="false"
       uniform="false" /><inkscape:path-effect
       effect="bspline"
       id="path-effect15"
       is_visible="true"
       lpeversion="1.3"
       weight="33.333333"
       steps="2"
       helper_size="0"
       apply_no_weight="true"
       apply_with_weight="true"
       only_selected="false"
       uniform="false" /><inkscape:path-effect
       effect="bspline"
       id="path-effect14"
       is_visible="true"
       lpeversion="1.3"
       weight="33.333333"
       steps="2"
       helper_size="0"
       apply_no_weight="true"
       apply_with_weight="true"
       only_selected="false"
       uniform="false" /><inkscape:path-effect
       effect="bspline"
       id="path-effect12"
       is_visible="true"
       lpeversion="1.3"
       weight="33.333333"
       steps="2"
       helper_size="0"
       apply_no_weight="true"
       apply_with_weight="true"
       only_selected="false"
       uniform="false" /><inkscape:path-effect
       effect="bspline"
       id="path-effect11"
       is_visible="true"
       lpeversion="1.3"
       weight="33.333333"
       steps="2"
       helper_size="0"
       apply_no_weight="true"
       apply_with_weight="true"
       only_selected="false"
       uniform="false" /><inkscape:path-effect
       effect="bspline"
       id="path-effect9"
       is_visible="true"
       lpeversion="1.3"
       weight="33.333333"
       steps="2"
       helper_size="0"
       apply_no_weight="true"
       apply_with_weight="true"
       only_selected="false"
       uniform="false" /><inkscape:path-effect
       effect="bspline"
       id="path-effect8"
       is_visible="true"
       lpeversion="1.3"
       weight="33.333333"
       steps="2"
       helper_size="0"
       apply_no_weight="true"
       apply_with_weight="true"
       only_selected="false"
       uniform="false" /><inkscape:path-effect
       effect="bspline"
       id="path-effect3"
       is_visible="true"
       lpeversion="1.3"
       weight="33.333333"
       steps="2"
       helper_size="0"
       apply_no_weight="true"
       apply_with_weight="true"
       only_selected="false"
       uniform="false" /><inkscape:path-effect
       effect="bspline"
       id="path-effect1"
       is_visible="true"
       lpeversion="1.3"
       weight="33.333333"
       steps="2"
       helper_size="0"
       apply_no_weight="true"
       apply_with_weight="true"
       only_selected="false"
       uniform="false" /><clipPath
       clipPathUnits="userSpaceOnUse"
       id="clipPath20"><path
         id="path20"
         style="fill:none;stroke:#000000;stroke-width:0.944882"
         d="m 317.99609,117.89062 c -0.39574,0.0247 -0.77439,0.20515 -1.20312,0.50196 -0.85745,0.59362 -1.91277,1.65043 -6.5957,5.67383 -4.68298,4.02336 -12.99412,11.01439 -21.30469,18.00586 -0.89056,-0.70058 -1.78171,-1.4015 -4.02149,-3.09766 -2.23973,-1.69616 -5.82729,-4.3874 -9.11718,-6.57422 -3.28994,-2.18682 -6.2812,-3.86869 -9.72071,-5.51367 -3.43946,-1.64498 -7.32703,-3.25365 -11.96289,-3.55274 -4.63581,-0.29908 -10.01991,0.71186 -15.2539,1.90821 -5.23403,1.19635 -10.3189,2.57759 -16.59961,6.25976 -6.28076,3.68221 -13.75644,9.66542 -17.64453,12.65625 -3.88814,2.99088 -4.18685,2.98924 -9.57032,-1.64648 -5.38343,-4.63576 -15.85173,-13.90734 -20.88281,-17.38086 -5.03104,-3.47352 -4.62619,-1.1485 -22.51758,17.21094 -17.89139,18.35944 -54.078884,52.75518 -71.050779,73.98242 -16.971894,21.22723 -14.728556,29.28738 -13.408203,33.7793 1.320353,4.49188 1.716818,5.4152 21.503906,20.7832 19.787086,15.36796 58.964926,45.17935 78.818356,60.08594 19.85344,14.90654 20.38218,14.90658 21.4375,13.52148 1.05532,-1.3851 2.63673,-4.15409 3.49414,-5.27539 0.85746,-1.1213 0.9912,-0.59441 6.00391,1.31836 5.01275,1.91276 14.90501,5.21045 20.18164,6.85937 5.27668,1.64897 5.93713,1.6503 15.63281,-0.6582 9.69568,-2.3085 28.42614,-6.92672 38.25391,-9.36719 9.82777,-2.44042 10.75206,-2.70314 12.20313,-1.8457 1.45102,0.85744 3.42948,2.83529 4.55078,3.89063 1.12129,1.05529 1.38418,1.18691 6.46289,0.52734 5.07867,-0.65957 14.97332,-2.10934 20.25,-2.9668 5.27664,-0.85746 5.93653,-1.12269 8.37695,-3.36523 2.44042,-2.24255 6.66099,-6.464 9.36523,-8.64063 2.70429,-2.17659 3.89228,-2.30739 9.30079,-3.56054 5.40846,-1.25319 15.03794,-3.6281 20.05078,-4.94727 5.0128,-1.31917 5.40806,-1.58318 4.81445,-3.75977 -0.59361,-2.17654 -2.17725,-6.26466 -2.96875,-8.70507 -0.7915,-2.44046 -0.79012,-3.2321 -0.6582,-3.75977 0.13191,-0.52767 0.39489,-0.79216 11.34375,-10.42187 10.94886,-9.62972 32.58202,-28.62536 43.79492,-38.45313 11.2129,-9.82777 12.00599,-10.48691 12.59961,-11.14648 0.59362,-0.65958 0.98783,-1.31954 0.92187,-1.78125 -0.066,-0.46171 -0.59343,-0.7258 -1.12109,-1.1875 -0.52766,-0.4617 -1.0552,-1.12143 -19.19336,-20.38086 -18.13816,-19.25943 -53.88567,-57.11789 -72.41992,-76.77344 -18.53426,-19.65555 -19.85438,-21.10604 -20.84375,-21.76563 -0.49469,-0.32975 -0.90699,-0.46219 -1.30274,-0.4375 z m -72.18945,11.13477 c 0.46348,-0.0166 0.93361,0.016 1.4375,0.10156 0.50389,0.0856 1.04224,0.22324 1.57227,0.40625 0.26501,0.0915 0.5268,0.1954 0.7832,0.3086 0.2564,0.11319 0.50646,0.23603 0.74414,0.36914 0.23768,0.1331 0.4628,0.27557 0.67969,0.42383 0.21688,0.14825 0.42492,0.30135 0.62695,0.45703 0.40405,0.31136 0.78572,0.63105 1.16602,0.92578 0.76058,0.58945 1.51992,1.08323 2.10937,1.55859 0.29473,0.23768 0.54682,0.47088 0.77734,0.71094 0.11528,0.12003 0.22674,0.24211 0.33399,0.36719 0.10725,0.12508 0.21183,0.25361 0.31641,0.38672 0.41832,0.5324 0.83518,1.14032 1.31054,1.91992 0.23768,0.3898 0.48931,0.82295 0.72461,1.27929 0.2353,0.45635 0.45387,0.93505 0.625,1.41993 0.34226,0.96974 0.49437,1.95879 0.64649,2.81445 0.15211,0.85565 0.3048,1.57834 0.38086,2.37695 0.0761,0.79862 0.0767,1.67308 0.0957,2.79492 0.0143,0.8414 0.0383,1.82201 0.01,2.78907 -0.01,0.32235 -0.0251,0.64329 -0.0488,0.95703 -0.0475,0.62748 -0.12733,1.22602 -0.21289,1.79883 -0.0856,0.5728 -0.17564,1.11967 -0.24219,1.64257 -0.0666,0.52291 -0.10982,1.02236 -0.16211,1.52149 -0.0262,0.24956 -0.0548,0.49942 -0.0899,0.75195 -0.035,0.25254 -0.0766,0.50808 -0.1289,0.76953 -0.0523,0.26145 -0.11543,0.52923 -0.18555,0.80078 -0.21034,0.81465 -0.48413,1.66642 -0.72656,2.50782 -0.32325,1.12186 -0.59082,2.22494 -0.91406,3.09961 -0.0808,0.21866 -0.16414,0.42224 -0.25,0.61328 -0.25759,0.5731 -0.52964,1.02629 -0.75782,1.38281 -0.30423,0.47536 -0.53107,0.78027 -0.74023,1.10352 -0.20916,0.32324 -0.39878,0.66543 -0.62695,0.93164 -0.22818,0.2662 -0.4946,0.45645 -0.79883,0.72265 -0.0761,0.0666 -0.15595,0.13743 -0.24805,0.21289 -0.2763,0.22639 -0.67482,0.49018 -1.50195,0.77539 -0.27571,0.0951 -0.59822,0.19132 -0.95117,0.28907 -1.05887,0.29323 -2.3857,0.58959 -3.49805,0.83203 -1.11235,0.24243 -2.01177,0.431 -2.80859,0.63867 -0.26561,0.0692 -0.51844,0.14074 -0.76563,0.2168 -0.98876,0.30423 -1.86459,0.68525 -2.41601,0.81836 -0.55143,0.1331 -0.77883,0.018 -1.1211,-0.32422 -0.17113,-0.17114 -0.37136,-0.39849 -0.63281,-0.75977 -0.26145,-0.36127 -0.58363,-0.85505 -1.00195,-1.55859 -0.41833,-0.70355 -0.93179,-1.61673 -1.45703,-2.60547 -0.52527,-0.98874 -1.06345,-2.05278 -1.5293,-3.06055 -0.46586,-1.00777 -0.86054,-1.9596 -1.22656,-2.89844 -0.36603,-0.93881 -0.70292,-1.86593 -1.05469,-2.82617 -0.35177,-0.96024 -0.71872,-1.95292 -1.0586,-2.95117 -0.33988,-0.99825 -0.6532,-2.00122 -0.90039,-2.98047 -0.12359,-0.48962 -0.2294,-0.97433 -0.32031,-1.45117 -0.27274,-1.43053 -0.40234,-2.79855 -0.40234,-4.08203 0,-1.28349 0.1289,-2.4812 0.35351,-3.60156 0.0749,-0.37346 0.16079,-0.73918 0.25586,-1.09571 0.28522,-1.06957 0.65519,-2.06353 1.10352,-3.02343 0.14944,-0.31998 0.30823,-0.63744 0.47461,-0.95118 0.33275,-0.62748 0.69767,-1.24522 1.08984,-1.84179 0.39217,-0.59658 0.81071,-1.17098 1.24805,-1.71289 0.21867,-0.27096 0.44323,-0.53339 0.66992,-0.78711 0.22669,-0.25373 0.45576,-0.49908 0.6875,-0.73438 0.23174,-0.2353 0.4654,-0.46009 0.69922,-0.67578 0.23382,-0.21569 0.46824,-0.42229 0.70117,-0.61719 0.46586,-0.38979 0.92673,-0.73704 1.39258,-1.05078 0.46585,-0.31373 0.937,-0.59291 1.42187,-0.84961 0.24244,-0.12835 0.48885,-0.25221 0.73633,-0.36719 0.24749,-0.11495 0.49577,-0.22167 0.74414,-0.32031 0.49675,-0.19727 0.99144,-0.35857 1.4668,-0.47265 0.47536,-0.11409 0.93105,-0.18063 1.39453,-0.19727 z m -17.55273,3.53711 c 0.045,-5.8e-4 0.086,0.004 0.12304,0.0117 0.1112,0.0238 0.18573,0.0857 0.23438,0.1914 0.0162,0.0352 0.0304,0.0761 0.041,0.1211 0.0424,0.18004 0.0427,0.43956 0.0215,0.78906 -0.0106,0.17475 -0.026,0.37118 -0.0469,0.58399 -0.0208,0.2128 -0.0477,0.44077 -0.0781,0.67773 -0.0609,0.47393 -0.14101,0.98353 -0.23633,1.4707 -0.0953,0.48718 -0.20637,0.95285 -0.32812,1.44532 -0.1218,0.49246 -0.25295,1.01043 -0.39063,1.60351 -0.27536,1.18616 -0.5729,2.66904 -0.89063,4.10938 -0.31768,1.44029 -0.65672,2.83801 -0.82617,3.93945 -0.0424,0.27536 -0.0732,0.53243 -0.0976,0.77734 -0.0735,0.73473 -0.0815,1.36351 -0.11328,2.0625 -0.0212,0.466 -0.054,0.96331 -0.0937,1.57227 -0.0397,0.60896 -0.0857,1.32942 -0.13868,2.24023 -0.053,0.91081 -0.1118,2.011 -0.16211,3.08594 -0.0503,1.07494 -0.0921,2.1248 -0.11328,2.92969 -0.0424,1.60978 -6e-4,2.2442 -0.043,2.79492 -0.0265,0.3442 -0.0864,0.6563 -0.18945,0.85156 -0.0206,0.0391 -0.0423,0.0724 -0.0664,0.10157 -0.0242,0.0291 -0.0502,0.0524 -0.0781,0.0703 -0.0279,0.0179 -0.0581,0.0299 -0.0898,0.0352 -0.12709,0.0212 -0.2855,-0.0635 -0.46289,-0.20117 -0.0887,-0.0688 -0.18299,-0.14958 -0.2793,-0.23828 -0.0963,-0.0887 -0.19431,-0.18398 -0.29492,-0.2793 -0.20123,-0.19063 -0.40794,-0.38111 -0.61524,-0.58984 -0.20729,-0.20873 -0.41676,-0.43618 -0.62109,-0.69922 -0.10217,-0.13152 -0.2026,-0.27146 -0.33008,-0.43359 -0.19122,-0.2432 -0.44069,-0.5355 -0.8418,-0.91797 -0.2674,-0.25498 -0.60259,-0.55026 -1.03125,-0.89844 -0.21432,-0.17409 -0.45196,-0.36237 -0.71679,-0.56445 -0.52967,-0.40416 -1.1682,-0.86574 -1.85352,-1.35156 -2.05596,-1.45748 -4.54186,-3.11977 -5.83984,-3.9961 -0.86532,-0.58422 -1.20202,-0.81912 -1.33594,-0.92383 -0.067,-0.0524 -0.0838,-0.0719 -0.0898,-0.0859 -0.006,-0.014 -0.001,-0.0227 -0.0273,-0.0527 -0.0527,-0.0601 -0.22814,-0.20628 -0.45312,-0.38281 -0.22499,-0.17654 -0.49973,-0.38246 -0.75391,-0.5625 -0.50835,-0.36008 -0.93153,-0.61557 -1.33398,-0.91211 -0.30184,-0.22241 -0.59272,-0.46763 -0.65625,-0.77344 -0.0106,-0.051 -0.0147,-0.10376 -0.0117,-0.1582 0.003,-0.0544 0.0127,-0.11167 0.0312,-0.16992 0.0741,-0.233 0.28176,-0.49717 0.60742,-0.82813 0.32566,-0.33096 0.76959,-0.72879 1.32031,-1.22656 1.10144,-0.99554 2.62664,-2.39361 3.83399,-3.55859 0.60367,-0.58249 1.12902,-1.10546 1.59765,-1.58204 0.46864,-0.47653 0.88046,-0.90501 1.26172,-1.29687 0.19063,-0.19593 0.3729,-0.38431 0.56055,-0.57031 0.37531,-0.372 0.77078,-0.74024 1.28906,-1.17578 0.25914,-0.21778 0.5492,-0.45147 0.88281,-0.71094 0.33361,-0.25948 0.71121,-0.54427 1.11328,-0.8418 0.40212,-0.29753 0.82883,-0.60882 1.26172,-0.91992 0.86578,-0.6222 1.75505,-1.24781 2.51758,-1.77734 0.76253,-0.52954 1.39864,-0.96288 1.94141,-1.32032 0.27138,-0.17871 0.51869,-0.33786 0.74805,-0.48046 0.22931,-0.14265 0.44079,-0.26966 0.63671,-0.38086 0.19593,-0.11121 0.3765,-0.20765 0.54297,-0.28907 0.16647,-0.0814 0.31873,-0.14696 0.45508,-0.19726 0.20453,-0.0755 0.37486,-0.11545 0.50977,-0.11719 z m 33.49023,1.16406 c 0.0394,-4.8e-4 0.0879,0.007 0.14258,0.0215 0.10933,0.0285 0.25006,0.0884 0.41406,0.17187 0.164,0.0835 0.35113,0.18967 0.55078,0.31446 0.3993,0.24955 0.84952,0.56763 1.27735,0.90039 0.85565,0.6655 1.6174,1.38899 2.41601,2.26367 0.19966,0.21867 0.40047,0.4468 0.60547,0.68359 0.615,0.71037 1.25688,1.49845 1.94141,2.33985 0.45635,0.56092 0.93301,1.14476 1.39648,1.74609 0.23174,0.30066 0.45971,0.60597 0.68164,0.91406 0.22193,0.30809 0.43622,0.61986 0.64063,0.93359 0.2044,0.31375 0.39829,0.62937 0.58398,0.94727 0.18569,0.3179 0.36479,0.63812 0.53711,0.95899 0.17232,0.32085 0.33766,0.64219 0.50195,0.96484 0.1643,0.32265 0.32666,0.6455 0.48829,0.96875 0.13309,0.41832 0.26669,0.83796 0.41406,1.25391 0.14736,0.41593 0.3079,0.82946 0.49804,1.23828 0.3803,0.81762 0.87443,1.61552 1.14063,2.1289 0.0666,0.12835 0.12005,0.23985 0.16016,0.33789 0.0401,0.0981 0.0681,0.18329 0.0859,0.26172 0.0357,0.15687 0.0305,0.28513 0.002,0.42774 -0.0571,0.28521 -0.20871,0.62696 -1.9961,2.28125 -1.78739,1.65427 -5.20959,4.61981 -7.24414,6.36914 -2.03454,1.74933 -2.68243,2.28274 -3.21484,2.625 -0.1331,0.0856 -0.25765,0.15861 -0.375,0.2207 -0.35207,0.18628 -0.62829,0.26817 -0.78516,0.25391 -0.0784,-0.007 -0.12693,-0.0374 -0.14453,-0.13477 -0.006,-0.0325 -0.007,-0.0724 -0.006,-0.12109 0.002,-0.0975 0.0173,-0.23088 0.0488,-0.41211 0.0315,-0.18123 0.0788,-0.4112 0.14062,-0.70117 0.24719,-1.15988 0.74121,-3.28897 1.06446,-5.51368 0.0808,-0.55617 0.15139,-1.11744 0.21289,-1.68164 0.0615,-0.56419 0.11381,-1.13082 0.16015,-1.69531 0.0927,-1.12898 0.15976,-2.25211 0.2168,-3.33594 0.057,-1.08383 0.10403,-2.12828 0.12305,-3.1289 0.019,-1.00063 0.0102,-1.95619 -0.0469,-2.85938 -0.0143,-0.2258 -0.0308,-0.44845 -0.0508,-0.66797 -0.0997,-1.0976 -0.26793,-2.11992 -0.4707,-3.09961 -0.0811,-0.39187 -0.16749,-0.77791 -0.25781,-1.1582 -0.0903,-0.38029 -0.18393,-0.75536 -0.2793,-1.12109 -0.19074,-0.73146 -0.38824,-1.42254 -0.57422,-2.03516 -0.093,-0.30631 -0.18397,-0.59402 -0.26953,-0.85547 -0.17113,-0.5229 -0.3224,-0.94621 -0.45313,-1.30273 -0.13072,-0.35652 -0.2406,-0.64565 -0.32617,-0.90235 -0.0856,-0.25669 -0.14707,-0.48002 -0.13281,-0.625 0.007,-0.0725 0.0342,-0.12666 0.0859,-0.15429 0.0258,-0.0138 0.0563,-0.021 0.0957,-0.0215 z m 11.63672,2.1875 c 0.048,0.003 0.097,0.0102 0.14648,0.0215 0.0495,0.0113 0.0985,0.026 0.15039,0.0449 0.15565,0.0566 0.32479,0.14619 0.51954,0.26562 0.12983,0.0796 0.27086,0.17277 0.42773,0.27735 0.15687,0.10458 0.32934,0.22096 0.51562,0.34961 0.18629,0.12864 0.38689,0.27052 0.59961,0.42383 0.21273,0.1533 0.43764,0.31753 0.67383,0.49609 0.2362,0.17856 0.48354,0.36981 0.74024,0.57422 0.25669,0.2044 0.52307,0.4234 0.79492,0.65039 0.81554,0.68095 1.68126,1.44729 2.49414,2.20312 0.27096,0.25195 0.53598,0.50294 0.79297,0.74805 0.25699,0.24511 0.50722,0.48353 0.74609,0.71289 0.47774,0.45872 0.91463,0.87649 1.29492,1.21875 0.38029,0.34226 0.70255,0.60861 0.96875,0.83203 0.1331,0.11171 0.25285,0.21412 0.35743,0.3086 0.10457,0.0945 0.19542,0.18201 0.27148,0.26757 0.15211,0.17114 0.24654,0.33269 0.29883,0.48243 0.0523,0.14973 0.062,0.28656 0.043,0.41015 -0.01,0.0618 -0.0261,0.1204 -0.0508,0.17774 -0.0123,0.0287 -0.0265,0.0574 -0.043,0.0859 -0.0164,0.0286 -0.0358,0.0568 -0.0566,0.0859 -0.0416,0.0582 -0.092,0.11912 -0.15235,0.1836 -0.0603,0.0645 -0.13012,0.13292 -0.21094,0.20898 -0.32325,0.30423 -0.81771,0.72282 -1.36914,1.16016 -0.55142,0.43733 -1.15991,0.89395 -1.65429,1.16015 -0.0618,0.0333 -0.12161,0.0624 -0.17969,0.0899 -0.0581,0.0275 -0.1139,0.0522 -0.16797,0.0742 -0.10814,0.044 -0.20851,0.0778 -0.29883,0.10157 -0.18063,0.0475 -0.32289,0.0581 -0.41797,0.0391 -0.0238,-0.005 -0.0457,-0.0125 -0.0645,-0.0215 -0.0188,-0.009 -0.035,-0.0204 -0.0508,-0.0352 -0.063,-0.0588 -0.10966,-0.16881 -0.20117,-0.375 -0.0458,-0.10309 -0.10168,-0.22985 -0.17774,-0.38672 -0.0761,-0.15687 -0.17208,-0.34387 -0.2832,-0.55273 -0.11111,-0.20887 -0.23867,-0.43955 -0.37891,-0.68555 -0.28046,-0.492 -0.61137,-1.04428 -0.97265,-1.5957 -0.72256,-1.10285 -1.56036,-2.20483 -2.41602,-3.34571 -0.21391,-0.28522 -0.4279,-0.57267 -0.64062,-0.85937 -0.21273,-0.2867 -0.42451,-0.57187 -0.62891,-0.85352 -0.40881,-0.5633 -0.7942,-1.11135 -1.12695,-1.61523 -0.16638,-0.25195 -0.31812,-0.49359 -0.45508,-0.72266 -0.0685,-0.11453 -0.13346,-0.22573 -0.19336,-0.33398 -0.0599,-0.10826 -0.11551,-0.21285 -0.16601,-0.31446 -0.10102,-0.20321 -0.18171,-0.39201 -0.24024,-0.5664 -0.0293,-0.0872 -0.0529,-0.17057 -0.0703,-0.25 -0.0174,-0.0794 -0.0285,-0.15526 -0.0332,-0.22657 -0.002,-0.0357 -0.005,-0.0699 -0.004,-0.10351 7.9e-4,-0.0336 0.004,-0.0662 0.008,-0.0977 0.008,-0.063 0.0209,-0.12307 0.0391,-0.17773 0.0362,-0.10933 0.0912,-0.20129 0.16016,-0.27734 0.0345,-0.038 0.0731,-0.0719 0.11328,-0.10157 0.0402,-0.0297 0.0827,-0.0548 0.12695,-0.0762 0.0443,-0.0214 0.09,-0.0397 0.13672,-0.0527 0.0467,-0.0131 0.095,-0.0206 0.14258,-0.0254 0.0475,-0.005 0.0946,-0.005 0.14258,-0.002 z m -43.83789,26.48242 c 0.0202,-6.1e-4 0.0402,2.5e-4 0.0606,0.002 0.0407,0.003 0.0823,0.0119 0.12304,0.0234 0.0204,0.006 0.0403,0.0121 0.0606,0.0195 0.0404,0.0149 0.08,0.0321 0.11914,0.0527 0.0196,0.0103 0.0395,0.0218 0.0586,0.0332 0.0573,0.0343 0.11105,0.0725 0.16211,0.11328 0.10213,0.0817 0.18995,0.17119 0.27149,0.2754 0.0815,0.1042 0.15722,0.22417 0.23828,0.36523 0.054,0.094 0.1106,0.19871 0.17187,0.31445 0.0613,0.11575 0.12766,0.24291 0.19532,0.37696 0.0338,0.067 0.0676,0.13555 0.10156,0.20507 0.034,0.0695 0.0684,0.1403 0.10156,0.21094 0.0664,0.14128 0.13005,0.28248 0.1875,0.41992 0.0574,0.13745 0.10759,0.27003 0.14844,0.39258 0.0204,0.0613 0.0389,0.12087 0.0547,0.17774 0.0158,0.0569 0.0289,0.11218 0.041,0.16601 0.0121,0.0538 0.0238,0.10605 0.0332,0.1582 0.0282,0.15655 0.0453,0.30802 0.0664,0.47461 0.014,0.11107 0.0304,0.22806 0.0508,0.35743 0.0511,0.3234 0.1344,0.7216 0.18946,1.04101 0.011,0.0639 0.021,0.12526 0.0293,0.18164 0.008,0.0564 0.0149,0.10786 0.0195,0.1543 0.005,0.0464 0.006,0.087 0.006,0.12109 0,0.0341 -0.003,0.0629 -0.008,0.084 -0.005,0.0211 -0.013,0.0353 -0.0234,0.0449 -0.005,0.005 -0.0111,0.008 -0.0176,0.01 -0.0131,0.004 -0.0284,0.003 -0.0469,-0.002 -0.009,-0.003 -0.0187,-0.005 -0.0293,-0.01 -0.0426,-0.0187 -0.097,-0.0541 -0.16211,-0.0996 -0.0651,-0.0455 -0.14195,-0.10084 -0.23047,-0.16211 -0.0885,-0.0613 -0.18836,-0.12748 -0.29687,-0.19727 -0.32553,-0.20936 -0.72414,-0.4511 -1.0918,-0.67578 -0.12255,-0.0749 -0.24185,-0.14819 -0.35547,-0.22266 -0.17042,-0.1117 -0.32844,-0.22601 -0.46679,-0.35351 -0.0231,-0.0213 -0.0445,-0.0424 -0.0664,-0.0644 -0.0439,-0.044 -0.086,-0.0891 -0.125,-0.13672 -0.0195,-0.0238 -0.0385,-0.0494 -0.0566,-0.0742 -0.0363,-0.0497 -0.069,-0.0998 -0.0996,-0.1543 -0.046,-0.0817 -0.0861,-0.17102 -0.11914,-0.26367 -0.011,-0.0309 -0.0216,-0.0617 -0.0312,-0.0937 -0.0194,-0.064 -0.0366,-0.13087 -0.0508,-0.19922 -0.007,-0.0342 -0.0117,-0.0683 -0.0176,-0.10351 -0.0117,-0.0704 -0.0222,-0.14259 -0.0293,-0.2168 -0.004,-0.0371 -0.005,-0.0753 -0.008,-0.11328 -0.005,-0.076 -0.009,-0.15309 -0.01,-0.23242 -0.001,-0.15873 0.006,-0.32393 0.0195,-0.49415 0.0136,-0.17021 0.0353,-0.34566 0.0625,-0.51757 0.0136,-0.086 0.0279,-0.17072 0.0449,-0.25391 0.017,-0.0832 0.0362,-0.16389 0.0566,-0.24219 0.0102,-0.0392 0.0202,-0.0777 0.0312,-0.11523 0.0221,-0.0751 0.0467,-0.14788 0.0723,-0.21485 0.0128,-0.0335 0.0254,-0.0646 0.0391,-0.0957 0.0136,-0.0311 0.0285,-0.0615 0.043,-0.0898 0.0289,-0.0568 0.0594,-0.10793 0.0918,-0.15235 0.0162,-0.0222 0.0318,-0.0418 0.0488,-0.0605 0.034,-0.0375 0.0704,-0.068 0.10742,-0.0918 0.0185,-0.0119 0.0375,-0.0225 0.0566,-0.0312 0.0191,-0.009 0.0371,-0.0156 0.0566,-0.0215 0.0391,-0.0117 0.0807,-0.0183 0.12109,-0.0195 z" /></clipPath><meshgradient
       inkscape:collect="always"
       id="meshgradient25"
       gradientUnits="userSpaceOnUse"
       x="-97.158585"
       y="-560.36426"><meshrow
         id="meshrow25"><meshpatch
           id="meshpatch25"><stop
             path="c 113.909,0  227.818,0  341.727,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop25" /><stop
             path="c 0,121.32  0,242.639  0,363.959"
             style="stop-color:#800080;stop-opacity:1"
             id="stop26" /><stop
             path="c -113.909,0  -227.818,0  -341.727,0"
             style="stop-color:#ffffff;stop-opacity:1"
             id="stop27" /><stop
             path="c 0,-121.32  0,-242.639  0,-363.959"
             style="stop-color:#800080;stop-opacity:1"
             id="stop28" /></meshpatch></meshrow></meshgradient></defs><sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     showgrid="false"
     inkscape:zoom="0.16232854"
     inkscape:cx="702.27947"
     inkscape:cy="551.35099"
     inkscape:window-width="1440"
     inkscape:window-height="762"
     inkscape:window-x="0"
     inkscape:window-y="25"
     inkscape:window-maximized="1"
     inkscape:current-layer="g1"
     showborder="false" /><g
     inkscape:groupmode="layer"
     inkscape:label="Image"
     id="g1"
     transform="translate(-105.86448,648.70592)"><g
       id="g33"
       inkscape:label="g33"><g
         id="g32"
         transform="matrix(0.56903404,0,0,0.60282437,261.18771,-234.50162)"><text
           xml:space="preserve"
           style="font-weight:600;font-size:287.24px;line-height:0;font-family:'Kohinoor Devanagari';-inkscape-font-specification:'Kohinoor Devanagari Semi-Bold';fill:#ffffff;fill-opacity:1;stroke:url(#meshgradient25);stroke-width:2;stroke-dasharray:none"
           x="-106.48134"
           y="-206.21277"
           id="text23"
           transform="scale(1.0254829,0.97515036)"><tspan
             sodipodi:role="line"
             id="tspan23"
             x="-106.48134"
             y="-206.21277"
             style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:517.033px;font-family:Verdana;-inkscape-font-specification:'Verdana, Bold';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-east-asian:normal;fill:#ffffff;fill-opacity:1;stroke:url(#meshgradient25);stroke-width:2;stroke-dasharray:none;stroke-opacity:1">G</tspan></text><path
           id="ellipse30"
           style="fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:3.13792;stroke-dasharray:none;stroke-opacity:1"
           d="M 51.137408,-529.60129 A 159.73044,467.73249 55.094773 0 0 -266.655,-124.06644 159.73044,467.73249 55.094773 0 0 191.59486,-238.64996 159.73044,467.73249 55.094773 0 0 509.38929,-644.18615 159.73044,467.73249 55.094773 0 0 51.137408,-529.60129 Z m 14.128397,29.26637 a 127.59562,372.4886 55.087256 0 1 365.108405,-90.8938 127.59562,372.4886 55.087256 0 1 -252.90777,323.31238 127.59562,372.4886 55.087256 0 1 -365.10637,90.89249 127.59562,372.4886 55.087256 0 1 252.905735,-323.31107 z" /></g><path
         sodipodi:type="star"
         style="fill:#ff7100;fill-opacity:1;stroke:none;stroke-width:2;stroke-dasharray:none;stroke-opacity:1"
         id="path32"
         inkscape:flatsided="false"
         sodipodi:sides="5"
         sodipodi:cx="-491.61606"
         sodipodi:cy="-645.6944"
         sodipodi:r1="48.594044"
         sodipodi:r2="24.297022"
         sodipodi:arg1="0.50682299"
         sodipodi:arg2="1.1351415"
         inkscape:rounded="0"
         inkscape:randomized="0"
         d="m -449.13072,-622.10675 -32.23189,-1.56012 -19.55794,25.66741 -8.47645,-31.13645 -30.45489,-10.66904 26.99316,-17.68327 0.73578,-32.26124 25.15914,20.20759 30.90963,-9.2695 -11.44396,30.17225 z"
         inkscape:transform-center-x="2.8752476"
         inkscape:transform-center-y="1.8199387"
         transform="translate(708.1315,41.043541)" /></g></g><script
     id="mesh_polyfill"
     type="text/javascript">&#10;!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();&#10;</script></svg>
